import os
import uuid
import logging
from telegram import Update, InputFile, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

#–∏–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
from bot_db import check_rate_limit #—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
from dictionary import translations #—Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –¥–≤—É—Ö —è—ã–∑–∫–∞—Ö
from task_generations import generate_markdown, markdown_to_pdf #—Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤

TELEGRAM_TOKEN = ""  #—Ç–≤–æ–π —Ç–æ–∫–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, 
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "en")
def get_user_language(context):
    return context.user_data.get("language", "en")

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_keyboard():
    keyboard = [
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
         InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def get_menu_keyboard(lang):
    keyboard = [
        [InlineKeyboardButton("üìÑ Generate Math Problems", callback_data="menu_generate") if lang == "en" else 
         InlineKeyboardButton("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="menu_generate")],
        [InlineKeyboardButton("üåç Change Language", callback_data="menu_language") if lang == "en" else 
         InlineKeyboardButton("üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="menu_language")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äì —Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        translations["start"]["en"] if get_user_language(context) == "en" else translations["start"]["ru"],
        reply_markup=get_language_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (–ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏)
async def set_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    lang = "en" if query.data == "lang_en" else "ru"

    context.user_data["language"] = lang
    await query.answer()
    await query.edit_message_text(translations["language_set"][lang],reply_markup=None)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã Telegram
    await context.bot.set_my_commands([
        BotCommand("menu", "Open main menu" if lang == "en" else "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand("generate", "Generate math problems" if lang == "en" else "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"),
        BotCommand("language", "Change bot language" if lang == "en" else "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞")
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await query.message.reply_text(
        translations["menu"][lang],
        parse_mode="Markdown",
        reply_markup=get_menu_keyboard(lang)
    )

# –ö–æ–º–∞–Ω–¥–∞ /menu (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥)
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(context)
    await update.message.reply_text(
        translations["menu"][lang],
        parse_mode="Markdown",
        reply_markup=get_menu_keyboard(lang)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –≤ –º–µ–Ω—é
async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    lang = get_user_language(context)

    if query.data == "menu_generate":
        await query.answer()
        await query.message.reply_text(translations["menu_generate"][lang])

    elif query.data == "menu_language":
        await query.answer()
        await query.message.reply_text(
            translations["menu_language"][lang],
            reply_markup=get_language_keyboard()
        )

# –ö–æ–º–∞–Ω–¥–∞ /generate
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    lang = get_user_language(context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    if not check_rate_limit(chat_id):
        await update.message.reply_text(translations["exceeded_limit"][lang])
        return

    query = ' '.join(context.args) if context.args else None
    if not query:
        await update.message.reply_text(translations["provide_topic"][lang])
        return

    generated_markdown = generate_markdown(query)
    if not generated_markdown:
        await update.message.reply_text(translations["generation_error"][lang])
        return

    filename = f"output_{uuid.uuid4().hex}.pdf"
    pdf_file = markdown_to_pdf(generated_markdown, filename)

    if pdf_file and os.path.exists(pdf_file):
        try:
            with open(pdf_file, "rb") as f:
                await update.message.reply_document(document=InputFile(f), filename=pdf_file)
            os.remove(pdf_file)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
            await update.message.reply_text(translations["sending_error"][lang])
    else:
        await update.message.reply_text(translations["generation_error"][lang])

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))  # /start ‚Äì –≤—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫
    app.add_handler(CommandHandler("menu", menu))  # /menu ‚Äì –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é
    app.add_handler(CommandHandler("generate", generate))  # /generate ‚Äì –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    app.add_handler(CallbackQueryHandler(set_language_callback, pattern="^lang_"))  # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    app.add_handler(CallbackQueryHandler(menu_callback, pattern="^menu_"))  # –ö–ª–∏–∫–∏ –≤ –º–µ–Ω—é

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
